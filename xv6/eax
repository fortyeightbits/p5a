kernel/exec.c:  proc->tf->eip = elf.entry;  // main
kernel/exec.c:  proc->tf->esp = sp;
kernel/proc.c:  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
kernel/proc.c:  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
kernel/proc.c:  p->tf->es = p->tf->ds;
kernel/proc.c:  p->tf->ss = p->tf->ds;
kernel/proc.c:  p->tf->eflags = FL_IF;
kernel/proc.c:  p->tf->esp = PGSIZE;
kernel/proc.c:  p->tf->eip = 0;  // beginning of initcode.S
kernel/proc.c:  np->tf->eax = 0;
kernel/proc.c:  np->tf->eax = 0;
kernel/proc.c~:  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
kernel/proc.c~:  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
kernel/proc.c~:  p->tf->es = p->tf->ds;
kernel/proc.c~:  p->tf->ss = p->tf->ds;
kernel/proc.c~:  p->tf->eflags = FL_IF;
kernel/proc.c~:  p->tf->esp = PGSIZE;
kernel/proc.c~:  p->tf->eip = 0;  // beginning of initcode.S
kernel/proc.c~:  np->tf->eax = 0;
kernel/proc.c~:  np->tf->eax = 0;
kernel/syscall.c:  return fetchint(proc, proc->tf->esp + 4 + 4*n, ip);
kernel/syscall.c:  num = proc->tf->eax;
kernel/syscall.c:    proc->tf->eax = syscalls[num]();
kernel/syscall.c:    proc->tf->eax = -1;
kernel/trap.c:  if(tf->trapno == T_SYSCALL){
kernel/trap.c:  switch(tf->trapno){
kernel/trap.c:            cpu->id, tf->cs, tf->eip);
kernel/trap.c:    if(proc == 0 || (tf->cs&3) == 0){
kernel/trap.c:              tf->trapno, cpu->id, tf->eip, rcr2());
kernel/trap.c:            proc->pid, proc->name, tf->trapno, tf->err, cpu->id, tf->eip, 
kernel/trap.c:  if(proc && proc->killed && (tf->cs&3) == DPL_USER)
kernel/trap.c:  if(proc && proc->state == RUNNING && tf->trapno == T_IRQ0+IRQ_TIMER)
kernel/trap.c:  if(proc && proc->killed && (tf->cs&3) == DPL_USER)
